# Summarizing data

```{r, include = FALSE}
knitr::opts_chunk$set(fig.width=6, fig.height=3.5, fig.align="center")
```

Having loaded and thoroughly explored a data set, we are ready to distill it down to concise conclusions. At its simplest, this involves calculating summary statistics like counts, means, and standard deviations. Beyond this is the fitting of models, and hypothesis testing and confidence interval calculation. R has a huge number of packages devoted to these tasks and this is a large part of its appeal, but is beyond the scope of today.

Loading the data as before, if you have not already done so:

```{r message=F, warning=F}
library(tidyverse)

geo <- read_csv("r-intro/geo.csv")
gap <- read_csv("r-intro/gap-minder.csv")
gap_geo <- left_join(gap, geo, by="name")
```


## Summary functions

R has a variety of functions for summarizing a vector, including: `sum`, `mean`, `min`, `max`, `median`, `sd`.

```{r}
mean( c(1,2,3,4) )
```

We can use these on the Gapminder data.

```{r}
gap2010 <- filter(gap_geo, year == 2010)
sum(gap2010$population)
mean(gap2010$life_exp)
```


## Missing values

Why did `mean` fail? The reason is that `life_exp` contains missing values (`NA`).

```{r}
gap2010$life_exp
```

R will not ignore these unless we explicitly tell it to with `na.rm=TRUE`.

```{r}
mean(gap2010$life_exp, na.rm=TRUE)
```

Ideally we should also use `weighted.mean` here, to take population into account.

```{r}
weighted.mean(gap2010$life_exp, gap2010$population, na.rm=TRUE)
```

`NA` is a special value. If we try to calculate with `NA`, the result is `NA`

```{r}
NA + 1
```

`is.na` can be used to detect `NA` values, or `na.omit` can be used to directly remove rows of a data frame containing them.

```{r}
is.na( c(1,2,NA,3) )

cleaned <- filter(gap2010, !is.na(life_exp))
weighted.mean(cleaned$life_exp, cleaned$population)
```

## Grouped summaries

The `summarize` function in `dplyr` allows summary functions to be applied to data frames.

```{r}
summarize(gap2010, mean_life_exp = weighted.mean(life_exp, population, na.rm=TRUE))
```

So far unremarkable, but `summarize` comes into its own when the `.by` argument is used to group data. (There is also an older style of doing this using a function called `group_by`.)

```{r}
summarize(
    gap_geo, 
    mean_life_exp = weighted.mean(life_exp, population, na.rm=TRUE),
    .by = year)
```

:::{.challenge}
### Challenge: summarizing {-}

What is the total population for each year? Plot the result.

Advanced: What is the total GDP for each year? For this you will first need to calculate GDP per capita times the population of each country.
:::

The `.by` argument can be used to group by multiple columns, much like `count`. We need to use `c( )` for this, as below. We can use this to see how the rest of the world is catching up to OECD nations in terms of life expectancy.

```{r}
result <- summarize(
    gap_geo,
    mean_life_exp = weighted.mean(life_exp, population, na.rm=TRUE),
    .by = c(year, oecd))
result
ggplot(result, aes(x=year,y=mean_life_exp,color=oecd)) + geom_line()
```

A similar plot could be produced using `geom_smooth`. Differences here are that we have full control over the summarization process so we were able to use the exact summarization method we want (`weighted.mean` for each year), and we have access to the resulting numeric data as well as the plot. We have reduced a large data set down to a smaller one that distills out one of the stories present in this data. However the earlier visualization and exploration activity using `ggplot2` was essential. It gave us an idea of what sort of variability was present in the data, and any unexpected issues the data might have.


## t-test

We will finish this section by demonstrating a t-test. The main point of this section is to give a flavour of how statistical tests work in R, rather than the details of what a t-test does.

Has life expectancy increased from 2000 to 2010?

```{r}
gap2000 <- filter(gap_geo, year == 2000)
gap2010 <- filter(gap_geo, year == 2010)

t.test(gap2010$life_exp, gap2000$life_exp)
```

Statistical routines often have many ways to tweak the details of their operation. These are specified by further arguments to the function call, to override the default behaviour. By default, `t.test` performs an unpaired t-test, but these are repeated observations of the same countries. We can specify `paired=TRUE` to `t.test` to perform a paired sample t-test and gain some statistical power. Check this by looking at the help page with `?t.test`.

It's important to first check that both data frames are in the same order.

```{r}
all(gap2000$name == gap2010$name)

t.test(gap2010$life_exp, gap2000$life_exp, paired=TRUE)
```

When performing a statistical test, it's good practice to visualize the data to make sure there is nothing funny going on.

```{r fig.width=3.5,fig.height=4.5}
plot(gap2000$life_exp, gap2010$life_exp)
abline(0,1)
```

This is a visual confirmation of the t-test result. If there were no difference between the years then points would lie approximately evenly above and below the diagonal line, which is clearly not the case. However the outlier may warrant investigation.

